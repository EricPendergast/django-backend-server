from mongoengine import *
from .users import Group
import datetime
from project.settings import constants

"""
Event is a under group-referencing Document, auto-saving response generated by engines. 
Presentation use most likely.
"""


class EventChart(EmbeddedDocument):
    labels = ListField()
    x_label = StringField()
    y_label = StringField()
    r_label = StringField()
    datasets = ListField(DictField())


class EventDetailData(EmbeddedDocument):
    data = ListField(DictField())
    columns = ListField(DictField())


class Event(Document):
    event_category = StringField()
    event_type = StringField()  # We can check if event_type is under event category
    event_value = StringField()
    event_desc = ListField(DictField())
    detailed_desc = ListField(DictField())
    analysis_desc = ListField(DictField())
    chart_type = StringField()  # Defined by event_type actually
    chart = EmbeddedDocumentField(EventChart)
    detailed_data = EmbeddedDocumentField(EventDetailData)
    expiry_date = DateTimeField()  # Only when status is not C
    event_status = StringField(
        default=constants().get('event').get('category').get(
            'initializing'))  # I = initializing, P = pending, # T = taken, # A = aborted, # C = continuous
    created_at = DateTimeField(default=datetime.datetime.now)
    updated_at = DateTimeField(default=datetime.datetime.now)

    # Not disposed, saving mother data here and present aggregated detailed_data and chart_data
    source_data = ListField(DictField())  # Only when status is C
    update_freq = IntField()  # Only when status is C, by hour
    group = ReferenceField(Group)

    @queryset_manager
    def objects(self, _queryset):
        """
        Reset query object with default order by updated_at

        This may actually also be done by defining a default ordering for
        the document, but this illustrates the use of manager methods
        """
        return _queryset.order_by('-updated_at')
